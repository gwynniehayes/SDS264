---
title: "R Tip of the Day"
subtitle: "Fun random plots and graphs you are never going to use!"
author: Gwynnie Hayes
format: revealjs
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
library(ggplot2)
library(tidyverse)
library(beeswarm)
library(ggbeeswarm)
library(fmsb)
library(viridis)
```

```{r}
salmon_stomachs <- read_csv("~/Desktop/15/SDS264/r tip of the day/Data/salmon_stomachs.csv")
```

## Beeswarms

Beeswarm plots allow you to visualize the distribution of data on a single axis while still looking at the individual data points

-   Visualizes overlapping data easily

-   Displays smaller data sets well!

## ggbeeswarm

``` r
library(ggbeeswarm)

salmon_stomachs |>
ggplot(aes(x = lab_length_mm, y = prey_big)) +
  geom_beeswarm() +
  labs(x = "Length of Salmon", y = "Prey Eaten")
```

```{r}
salmon_stomachs |>
ggplot(aes(x = lab_length_mm, y = prey_big)) +
  geom_beeswarm() +
  labs(x = "Length of Salmon", y = "Prey Eaten")
```

## 

```{r}
big_hatchery_fish <- salmon_stomachs |>
  drop_na(hatchery) |>
  group_by(hatchery) |>
  slice_max(lab_length_mm) |>
  relocate(hatchery,lab_length_mm) 
big_wins_3 <- salmon_stomachs |>
  mutate(prey_big= fct_reorder(prey_big,lab_length_mm))
only_hatchery <- salmon_stomachs |>
 drop_na(hatchery)
```

Beeswarms are often used with boxplot to show the individual data points

```{r}
ggplot() +
    geom_boxplot(data=big_wins_3, aes(y = prey_big, x = lab_length_mm)) + 
    geom_beeswarm(data=only_hatchery, aes(y = prey_big, x = lab_length_mm),color="gray",alpha=.5) + 
    geom_beeswarm(data=big_hatchery_fish, aes(y = prey_big, x = lab_length_mm,color=hatchery),size=3,show.legend = FALSE) + 
      theme_linedraw() +
    geom_label(data=big_hatchery_fish, 
               aes(y = prey_big, x = lab_length_mm,label=hatchery),
               nudge_x = 6, nudge_y = .3,size=2) +
    labs(x = "Length (millimeters)", y = "Prey in Stomach", title = "Length of Fish by Prey Eaten by Various Metrics",subtitle = "Boxplot = All Fish\nGrey dots = Just Hatchery Fish\nColored Dots = Biggest Fish from Each Hatchery",
         caption = "Data: https://www.webapps.nwfsc.noaa.gov/apex/parrdata/inventory/projects/project/858475")
```

## Why you won't use it!

-   They are not good for displaying large data sets

-   For looking at specific points, when you usually just want to see the overall distribution of points

-   Can only really be used to look at a categorical vs. numerical variable or else it looks just like a scatter plot

Beeswarm plots have a fairly limited scope of use on their own but when you can use them they are pretty fun!

## Streamgraph

Streamgraphs are used to visualize data over time, they easily show trends in data.

-   They are useful with large data sets

-   They are often visually appealing so useful if presenting data to a non-data audience

```{r}
library(ggstream)
```

## ggstreamgraph

``` r
library(ggstream)

salmon_stomachs |>
  ggplot(aes(x = 1:nrow(salmon_stomachs), y = weight_g, fill = hatchery)) +
  geom_stream(type = "ridge") +
  labs(title = "Salmon Prey Weight by Hatchery",
       x = "Salmon ID",
       y = "Salmon Weight (g)") +
  scale_fill_brewer(palette = "PiYG") 
```

## 

```{r}
salmon_stomachs |>
  group_by(salmon_id) |>
  ggplot(aes(x = 1:nrow(salmon_stomachs), y = weight_g, fill = hatchery)) +
  geom_stream(type = "ridge") +
  labs(title = "Salmon Prey Weight by Hatchery",
       x = "Salmon ID",
       y = "Salmon Weight (g)") +
  scale_fill_brewer(palette = "PiYG") 
```

## Why you wouldn't use it!

-   Legibility of specific values is difficult

-   Gets very cluttered very easily

-   Negative values are not supported

-   Require a time variable or they don't really make sense

Streamgraphs are pretty cool looking if you can find a use for one!

## Radar or Spider Chart

-   Radar charts are useful to represent multivariate data

-   Easily highlights extremes in the data

-   Looks at individual observations in the data and compares them to others

## ggradar

``` r
devtools::install_github("ricardo-bion/ggradar")

library(ggradar)

radar_data <- salmon_stomachs |>
  select(salmon_id, field_length_mm, lab_length_mm, weight_g, prey_weight_g, insulin_level) |>
  na.omit() |>
  slice(1:10)

radar_data <- radar_data |>
  mutate(salmon_id = as.character(salmon_id)) 

ggradar(radar_data, 
        values.radar = c(0, 50, 100),          
        grid.min = 0, 
        grid.mid = 50, 
        grid.max = 100,
        axis.label.size = 3, 
        group.line.width = .5,
        group.point.size = 3,
        background.circle.colour = "white",
        legend.title = "Salmon ID Number")           
```

## 

```{r}
library(ggradar)
```

```{r}
radar_data <- salmon_stomachs |>
  select(salmon_id, field_length_mm, lab_length_mm, weight_g, prey_weight_g, insulin_level) |>
  na.omit() |>
  slice(1:10)

radar_data <- radar_data |>
  mutate(salmon_id = as.character(salmon_id)) 

ggradar(radar_data, 
        values.radar = c(0, 50, 100),          
        grid.min = 0, 
        grid.mid = 50, 
        grid.max = 100,
        axis.label.size = 3, 
        group.line.width = .5,
        group.point.size = 3,
        background.circle.colour = "white",
        legend.title = "Salmon ID Number")           

```

## Why you probably won't use it

-   There is no ggradar package that is compatible with ggplot, so its a lot more difficult to make then it is useful

-   Easily cluttered, can't handle large data sets

-   Lines on the plots have no significance and can lead to confusion

## Thanks!
