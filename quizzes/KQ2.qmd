---
title: "Knowledge Quiz 2"
subtitle: "Gwynnie Hayes"
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---

Please answer the following questions, render a pdf, and submit both the qmd and pdf on Moodle by **11 PM on Sun May 4**.  Please also leave a copy of your qmd in your Submit folder on the St. Olaf RStudio server.

Guidelines: 

- No consulting with anyone else
- You may use only materials from this class (our class webpage, links on Moodle, our 3 online textbooks, files posted to the RStudio server, your personal notes from class)
- No online searches or use of large language models like ChatGPT

Pledge: 

I pledge my honor that on this quiz I have neither given nor received assistance not explicitly approved by the professor and that I an aware of no dishonest work.

- type your name here to acknowledge the pledge: Gwynnie Hayes

- OR

- place an X here if you intentionally are not signing the pledge: _______


```{r}
#| message: false
#| warning: false

library(tidyverse)
library(rvest)
library(tidytext)

park_data <- read_csv("~/Desktop/15/SDS264/quizzes/park_data_KQ2.csv")
```

## National Park Data

`park_data` is a 54x3 tibble containing information scraped from national park webpages for a past SDS264 final project.  A few notes about the 3 columns:

- `park_code` is a 4-letter code used as a key when merging files

- `address` is comprised of 4 pieces (described from *right* to *left*):
  - the final piece (following a comma and space) is a zip code (usually 5 digits but sometimes 5 digits then a dash then 4 more digits)
  - the 2nd to last piece is the state (an abbreviation with 2 capital letters)
  - the 3rd to last piece is the city (usually one or two words long, occasionally 3; always follows two or more spaces)
  - the first piece is the street address (often a number and a street, but will always be followed by at least two spaces)

- `activities` is a string of activities offered at each park, where activities are separated by commas


## Quiz Questions

Please answer the following questions using your knowledge of strings, regular expressions, and text analysis.  Please use `stringr` functions as much as possible, aim for efficient code, and use good style to make your code as readable as possible!


### Section 1

1. Find the subset of all `address` entries that contain a direction (north, south, east, or west).

```{r}
park_data |> 
  filter(str_detect(address, "North|South|East|West")) 
```

2. Produce a tibble showing how often each of the 4 directions from (1) occurs among the 54 `address` entries.  Which direction is most common?

```{r}
park_data |>
  mutate(address_direction = str_extract(address, "North|South|East|West")) |>
  count(address_direction)
```

3. Create a new tibble containing only national parks in Alaska (AK) and Hawaii (HI).

```{r}
park_data |>
  filter(str_detect(address, "AK|HI"))
```

### Section 2

4. Build a tibble which adds 4 columns to `park_data`:

- street_address
- city
- state
- zip_code

Hint: sometimes you can extract more than you want, and then remove the extra stuff...

```{r}
new_park <- park_data |>
  mutate(street_address = str_extract(address, "^.+?(?=\\s{2})"),
         city = str_extract(address, "\\s{2}[A-z ]+"),
         city = str_remove(city, "^(\\s+)"),
         city = str_remove(city, "[A-Z]{2}$"),
         state = str_extract(address, "[A-Z]{2}"), 
         zip_code = str_extract(address, "\\d{5}")) |>
  select(c("park_code", "activities", "street_address", "city", "state", "zip_code"))

head(new_park)
```

### Section 3

5. Create a new column in `park_data` which records the total number of activities in each park, then sort the parks from most activities to least.

```{r}
park_data |>
  mutate(activity_count = str_count(activities, ",") + 1)
```

6. Pick off all of the activities that end in "ing"; we'll refer to these as "verb activities".  Produce a count of the number of parks where each "verb activity" appears, and print the "verb activities" and their counts in order from most parks to fewest. (Note that you should consider something like "Group Camping" as different from "RV Camping" or just plain "Camping".)  Your answer should look like the tibble below:


#| eval: FALSE

# A tibble: 57 × 2
   verb_activity              n
   <chr>                  <int>
 1 Hiking                    50
 2 Shopping                  46
 3 Stargazing                34
 4 Wildlife Watching         31
 5 Camping                   30
 6 Scenic Driving            26
 7 Horse Trekking            23
 8 Canoe or Kayak Camping    22
 9 Group Camping             22
10 Paddling                  21
# ℹ 47 more rows```

Hint: if you produce a list where each element in the list is a vector (with differing numbers of strings), you can use `unlist` to produce a single character vector

```{r}
park_activities <- park_data |>
  select(activities) |>
  mutate(activities = str_split(activities, ",\\s")) |>
  unlist(recursive = TRUE) |>
  tibble(verb_activity = _) |>
  count(verb_activity) |>
  filter(str_detect(verb_activity, "ing$")) |>
  arrange(desc(n))

park_activities
```

Use your tibble from (6) to answer Questions (7)-(8).  

7. Print all the "verb activities" that have a capital letter / lower case letter combination that repeats later in the phrase (e.g. "Gh" appears twice).

```{r}
park_activities |>
  filter(str_detect(verb_activity, "([A-Z][a-z]).*\\1"))
```

8. Print all the "verb activities" that have the same consonant appear twice in a row.

```{r}
park_activities |>
  filter(str_detect(verb_activity, "([^aeiou])\\1"))
```

